#!/bin/sh

# find out where we are
ADMINROOT=`dirname $0`

#
# where is the chezbob machine?  (if running on the chezbob
# machine, use "localhost")
#
#CB_MACH=chezbob.ucsd.edu
CB_MACH=localhost

#
# where is the mail machine and what is the mh send command?
# (if running on the mail machine, use "localhost")
#
#MAIL_MACH=beowulf.ucsd.edu
#MAIL_CMD=/usr/local/MH/bin/send
MAIL_MACH=localhost
MAIL_CMD=/usr/bin/mh/send

#
# where is the makeform.pl utility?
#
MAKEFORM=${ADMINROOT}/../makeform.pl

#
# where is the query utility
#
QUERY=/home/wrao/bin/q

#
# where are the ssh and scp binaries?
#
SSH=/usr/local/bin/ssh
SCP=/usr/local/bin/scp

#
# check to see if we have a home
#
if [ -z $HOME ]; then
  echo "no home defined...exiting."
  exit 1
fi

#
# check for output directory
#
OUTDIR=${ADMINROOT}
if [ ! -d $OUTDIR ]; then
  echo "no outdir ${OUTDIR}...exiting."
  exit 1
fi
cd $OUTDIR

#
# check for agent configuration information, if needed
#
if [ "x${CB_MACH}" != "xlocalhost" -o "x${MAIL_MACH}" != "xlocalhost" ]; then
  #
  # check for ssh/scp
  #
  if [ ! -x $SSH ]; then
    echo "$SSH does not exist...exiting."
    exit 1
  fi
  if [ ! -x $SCP ]; then
    echo "$SCP does not exist...exiting."
    exit 1
  fi

  #
  # need agent configuration info (output from ssh-agent) to
  # get access to the remote machines.  this better describe
  # a running agent with keys capable of accessing both the
  # chezbob machine and the mail machine
  #
  MACH=`hostname`
  ACFILE=$HOME/.ssh/agent_configs/agent_config_${MACH}_sh
  if [ ! -f $ACFILE ]; then
    echo "no agent config file $ACFILE...exiting."
    exit 1
  fi
  source $ACFILE
fi

if [ "x${CB_MACH}" != "xlocalhost" ]; then
  if ( ! $SSH -n $CB_MACH true ); then
    echo "unable to access chezbob machine ${CB_MACH}...exiting."
    exit 1
  fi
fi
if [ "x${MAIL_MACH}" != "xlocalhost" ]; then
  if ( ! $SSH -n $MAIL_MACH true ); then
    echo "unable to access mail machine ${MAIL_MACH}...exiting."
    exit 1
  fi
fi

if [ "x${CB_MACH}" = "xlocalhost" ]; then
  if ( ! $QUERY users_overlimit | grep '|' | tr '|' ' ' >./list1 ); then
    echo "(local) unable to fetch overlimit list...exiting."
    exit 1
  fi
else
  if ( ! $SSH -n $CB_MACH q users_overlimit | grep '|' | tr '|' ' ' >./list1 ); then
    echo "unable to fetch overlimit list...exiting."
    exit 1
  fi
fi

/bin/rm -f ./email1.*
$MAKEFORM ./email1 ./list1

MAIL_TMPDIR=TMP_$$
if [ "x$MAIL_MACH" = "xlocalhost" ]; then
  if ( ! mkdir ./$MAIL_TMPDIR ); then
    echo "(local) unable to create temp directory ${MAIL_TMPDIR}...exiting."
  fi
  if ( ! cp ./email1.* ./${MAIL_TMPDIR} ); then
    echo "(local) unable to copy drafts..."
  else
    if ( ! $MAIL_CMD `pwd`/${MAIL_TMPDIR}/email1.* ); then
      echo "(local) unable to send drafts..."
    else
      if ( ! /bin/rm ./${MAIL_TMPDIR}/* ); then
        echo "(local) unable to flush tmp directory..."
      fi
    fi
  fi
  if ( ! rmdir ./${MAIL_TMPDIR} ); then
    echo "(local) unable to remove temp directory ${MAIL_TMPDIR}...exiting."
    exit 1
  fi
else
  if ( ! $SSH -n $MAIL_MACH mkdir $MAIL_TMPDIR ); then
    echo "unable to create temp directory ${MAIL_MACH}:${MAIL_TMPDIR}...exiting."
    exit 1
  fi
  if ( ! $SCP -q ./email1.* ${MAIL_MACH}:$MAIL_TMPDIR ); then
    echo "unable to copy drafts..."
  else
    if ( ! $SSH -n $MAIL_MACH $MAIL_CMD ~/${MAIL_TMPDIR}/email1.\* ); then
      echo "unable to send drafts..."
    else
      if ( ! $SSH -n $MAIL_MACH /bin/rm ~/${MAIL_TMPDIR}/\* ); then
        echo "unable to flush tmp directory..."
      fi
    fi
  fi
  if ( ! $SSH -n $MAIL_MACH rmdir $MAIL_TMPDIR ); then
    echo "unable to remove temp directory ${MAIL_MACH}:${MAIL_TMPDIR}...exiting."
    exit 1
  fi
fi
